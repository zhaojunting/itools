##############################################试题#####################################
1.
string,stringbuilder,stringbuffer原理，常量池
接口抽象类区别
内存估算，二分查找

2.
构造方法
异常处理，finally里return时，catch中抛出的异常没用
数据结构：堆，树
先序遍历。中序遍历，后序遍历
排序算法：快速，插入
网络通信：IP地址类型，ABCDE
死锁
操作系统

3.
变量命名
构造方法
多态机制：方法重写，方法重载

4.
设计模式
Spring AOP,Spring IOC

5.
内部类
servlet

6.
异常处理
会话跟踪（page，request，session，application）
多线程注意事项：
    上下文切换（保存，加载任务状态），多线程不一定快（任务执行越快，上下文开销越不可忽略）
    悲观锁，乐观锁，
    死锁：1.尽量避免多锁，2.若锁可排序则排序上锁，3.尝试使用timeOut参数
    资源限制：
        资源：带宽，磁盘IO，CPU，连接池，socket
        解决资源限制问题：单机到分布式，连接池，线程池，根据具体资源调节并发度
    线程安全：
        阻塞同步：互斥，悲观锁
        非阻塞同步：CAS,乐观锁，版本号冲突校验
        无同步方案（无锁）：可重入代码（不涉及公共资源读写），线程本地存储（ThreadLocal）空间换时间
    同步引起的超时：

CAS指令三大问题：
    a.ABA问题，版本号能解决
    b.循环CAS开销
    c.只能保证一个共享变量的原子操作


final，volatile，synchronized内存语义

7.
时间复杂度递推
有限自动机（NFA）
IPV6
ARP,RARP
类加载机制，组织结构


##############################################热点####################################
1.锁底层实现，对象头
http://blog.csdn.net/sunxianghuang/article/details/51932179
看虚拟机最后一章

2.IO底层实现，NIO
https://www.jianshu.com/p/486b0965c296
http://www.importnew.com/14111.html

3.设计模式

4.大字符串查询
KMP
http://blog.csdn.net/v_july_v/article/details/7041827

5.高并发网站前端到后端设计，秒杀系统设计
https://my.oschina.net/xianggao/blog/524943
http://blog.csdn.net/zgx6208/article/details/53308225
http://blog.csdn.net/wujizkm/article/details/50853577
高访问量系统的静态化架构设计.pdf
CDN:
https://cloud.tencent.com/document/product/228/2939
https://cloud.tencent.com/document/product/228/6290
阿里云栖社区干货
https://yq.aliyun.com/topic/113?spm=5176.7933777.711008.1.244756f5PxzYAQ&open_id=f0bdd916-af99-4f78-af39-349ea7346554--1973727937&open_cid=3265
https://yq.aliyun.com/articles/97173?spm=a2c4e.11154837.846063.7.3f879f14xQvQr4

6.hashmap原理,hashcode(),equals()
hashmap允许null k-v，hashtable不允许
数据+链表；链表防止hash冲突
作为Key的对象，若字段参与hashcode，equals计算，改字段应该是final的，否则可能内存泄漏。
若只复写equals，没复写hashcode。先hashcode 再equals。也可能会出现数据重复，内存泄漏。


7.懒汉式单例，恶汉式单例存在的问题，为什么用静态内部类式
恶汉：类加载即初始化对象，若没有使用需求，则占用内存。
懒汉：线程安全问题，指令重排序问题，需要使用volatile
内部类：既可以实现懒加载（调用时加载静态内部类），又可以实现线程安全（初始化时JVM保证<clinit>方法同步，clinit方法初始化类的静态域）

8.事务特性
ACID：原子，一致，隔离，持久。

9.zookeeper

10.springIOC,AOP,MVC

11.GC,Java内存模型
内存模型：
    线程独享：
        程序计数器：当前线程所执行的字节码的行号指示器，每个线程都需要一个程序计数器
        虚拟机栈：生命周期与线程相同，方法执行同事创建栈帧。
            异常：栈深度超出虚拟机允许深度-StackOverflowError
                  当虚拟机栈扩展时无法申请到足够内存-OutOfMemoryError
            栈帧：存储局部变量表，操作栈，动态链接，方法出口等信息。方法调用执行到完成的过程，对应一个栈帧在虚拟机栈中出入栈的过程
            局部变量表：存储编译期可知的1.基本数据类型，2.对象引用，3.returnAddress，内存空间编译期完成分配
        本地方法栈：与虚拟机栈作用相似，区别在与虚拟机栈执行Java方法，本地方法栈执行Native方法。


    线程共享：
        堆：虚拟机启动时创建，存放几乎所有对象。采用分代收集算法，堆可以处于物理不连续的内存空间中，逻辑连续即可。
            异常：OutOfMemoryError
        方法区：存储已被JVM加载的类信息，常量，静态变量，即时编译器编译后的代码等数据。
            '永久代'并不永久。方法区回收指：常量池回收，类卸载。
            1.7中，已经把放在永久代的字符串常量池移出。
            异常：OutOfMemoryError
        Class文件常量池？运行时常量池？ 需要看Class文件格式
        运行时常量池：方法区的一部分，存放编译期生成的字面量和符号引用，这部分内容将在类加载后存放到方法区的运行时常量池中。
            相比于Class常量池是具备动态性，不要求常量一定在编译期产生，并非Class文件中常量池的内容才能进入运行时常量池，运行期比如String.intern();

        直接内存：NIO，基于Channel与Buffer的IO方式，使用native函数库直接分配堆外内存，使用DirectByteBuffer作为这块内存的引用进行操作。
            堆外内存受本机总内存(RAM SWAP区或者分页文件)大小或处理器寻址空间限制。
            异常：OutOfMemoryError

垃圾收集与内存分配：
    跟搜索算法：
        Java中，可作为GC Roots的对象包括：
            1.虚拟机栈(栈帧中的本地变量表)中引用的对象
            2.方法区中的类静态属性引用的对象
            3.方法区中常量引用的对象
            4.本地方法栈中JNI，native方法引用的对象

        Java引用：强，软，弱，虚
            强：不会回收
            软：内存溢出之前，将软引用对象列入回收范围并进行回收。
            弱：生存下一次垃圾回收之前
            虚：不对对象生命周期构成影响，只是在回收时收到一个系统通知。

        对象生存死亡：
           最多两次标记过程：
            1.没有GC Roots 若对象没有实现finalize(),或已经调用过，则认为没必要执行
            2.若认为有必要执行，则该对象入队F-Queue队列中，由JVM自动建立的低优先级线程Finalizer线程去执行。
              finalize方法最多被执行一次。稍后GC将对F-Queue中的对象进行第二次标记


        方法区垃圾收集：
            主要回收：废弃常量 无用的类。
            废弃常量判断类似于对象。
            无用类满足：1.该类对象已经被回收，堆中不存在该类对象 2.加载该类的ClassLoader被回收 3.该类的Class对象没有被引用。

            反射，动态代理，cglib，jsp，osgi等场景都需要JVM具备类卸载功能。














12.对象初始化

13.一致性Hash
TreeMap（一致性hash环）
虚拟节点（影响均摊）
节点权重（ factor虚拟因子 = K *（当前节点权重/总权重） * 真实节点数 ）
md5Hash(server[i] + factor) -> 16位byte数组 --> 分4份 --> 4个long(只用低4位)
虚拟节点数 = 4 * factor
性质：
    平衡(充分利用节点)，
    单调(新增节点时，保证已分配内容不会被分配到其它旧节点，可以使原节点和新节点)，
    分散(避免相同内容被映射到不同节点，客户端有可能只看到一部分节点)
    负载(特定节点，避免不同客户端映射不同内容)

14.公平锁，非公平锁

15.linux命令

16.数据库索引 B+树
https://tech.meituan.com/mysql-index.html
    B树索引：看数据结构B+树
        索引有效： 高性能MySql P188
            1.全值匹配
            2.匹配最左前缀
            3.匹配列前缀
            4.匹配范围值
            5.精确匹配某一列，并范围匹配另外一列
            6.只访问索引的查询？
        索引无效：
            1.非最左前缀
            2.不能跳过索引中的列
            3.范围查询右边的所有索引列都不走


    Hash索引：
        索引有效：只有精确匹配所有索引列的查询才有效。Memory引擎显示支持Hash索引。
        优势：查询快
        限制：
            1.Hash索引数据并不是按照索引值顺序存储的，所以不能用于排序。
            2.不支持部分索引列匹配查找，因为是使用索引列的全部内容计算hash值的
            3.只支持等值比较操作
            4.hash冲突影响查询速度
            5.hash冲突影响索引维护(比如删除)

数据层优化：
1.索引
2.表结构
3.SQL优化 （sql改写，应用层改写）
    切分查询：批量删除，修改为按时间，或者按条目数，控制DB压力。
    分解关联查询：
        1.拆分成单表查询，方便缓存
        2.单个查询减少锁竞争
        3.在应用层关联，方便数据库拆分
        4.减少冗余记录的查询，数据库可能会重复访问某一部分数据
        5.相当于应用中实现哈希关联，而不是mysql嵌套循环关联。

    Mysql如何执行关联查询：循环嵌套关联。
    执行计划：左侧深度优先树
    Mysql关联查询优化：通过评估不同顺序时的成本来选择一个代价最小的关联顺序。



17.http，https
搜狗微信：
    技术分享|HTTPS原理科普  (DH密钥协商)
    HTTPS工作原理           (RSA密钥协商)

18.tcp
http://geek.csdn.net/news/detail/114503

19.mysql sql优化


##################################################################











